// Code generated by mockery v2.53.3. DO NOT EDIT.

package adapters

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCliServer is an autogenerated mock type for the CliServer type
type MockCliServer struct {
	mock.Mock
}

type MockCliServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCliServer) EXPECT() *MockCliServer_Expecter {
	return &MockCliServer_Expecter{mock: &_m.Mock}
}

// Handler provides a mock function with given fields: ctx, url
func (_m *MockCliServer) Handler(ctx context.Context, url string) (*[]string, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 *[]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]string, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]string); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCliServer_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type MockCliServer_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *MockCliServer_Expecter) Handler(ctx interface{}, url interface{}) *MockCliServer_Handler_Call {
	return &MockCliServer_Handler_Call{Call: _e.mock.On("Handler", ctx, url)}
}

func (_c *MockCliServer_Handler_Call) Run(run func(ctx context.Context, url string)) *MockCliServer_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCliServer_Handler_Call) Return(_a0 *[]string, _a1 error) *MockCliServer_Handler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCliServer_Handler_Call) RunAndReturn(run func(context.Context, string) (*[]string, error)) *MockCliServer_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCliServer creates a new instance of MockCliServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCliServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCliServer {
	mock := &MockCliServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
